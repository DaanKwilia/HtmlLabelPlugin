variables:
  BuildConfiguration: Release

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - LATEST_CHANGE.md
    - azure-pipelines.yml
    
pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - LATEST_CHANGE.md
    - azure-pipelines.yml

pool:
  vmImage: 'windows-latest'

stages:
- stage: generate_package
  displayName: Create Artifact
  jobs:
  - job: create_artifact
    displayName: Build Package
    steps:
      - task: NuGetToolInstaller@1
        displayName: NuGet Install
        inputs:
          versionSpec: 
          checkLatest: true
      - task: NuGetCommand@2
        displayName: NuGet Restore
        inputs:
          command: 'restore'
          restoreSolution: '**/*.sln'
          feedsToUse: 'select'
      - task: MSBuild@1
        displayName: Build
        inputs:
          solution: '**/*.sln'
          configuration: $(BuildConfiguration)
      - task: VSTest@2
        displayName: Run Unit Tests
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **\*Shared.Tests.dll
            !**\*TestAdapter.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'
          minimumExpectedTests: 1,
          failOnMinTestsNotRun: true
      - task: PublishTestResults@2
        displayName: Publish Unit Tests
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: '**/TEST-*.xml'
          failTaskOnFailedTests: true
      - task: CopyFiles@2
        displayName: Copy Artifact
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**\*.nupkg'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true
      - task: PublishBuildArtifacts@1
        displayName: Push Artifact
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
- stage: release_public_feed
  dependsOn: generate_package
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: Public Feed Push
  jobs:
  - deployment: push
    displayName: Push To NuGet
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/drop/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet - HTML Label'
